# -*- encoding: UTF-8 -*-
import datetime
from functools import wraps
import math

import zoneinfo
from sqlalchemy import Column, Integer, Sequence, String, Text, DateTime
from sqlalchemy.ext.declarative import declarative_base, declared_attr
from sqlalchemy.orm.session import object_session

from .types import UTCDateTime
from sapphire_backend.imomo.utils import strings


def session_required(func):
    """Decorator that ensures that a session object is passed as keyword
    argument to the given function.

    If no session object was passed as a keyword argument, then the decorator
    attempts to retrieve a session object using the implicit self argument
    which should refer to an instance of an _ImomoBase object.

    Args:
        self: Implicit self argument passed to bound methods in the model
              instances.
    Raises:
        TypeError: If self is not an instance of _ImomoBase
        ValueError: If the passed session is None or no session could be
                    retrieved for the provided model instance.
    """
    @wraps(func)
    def wrapper_session_required(self, *args, **kwargs):
        if not isinstance(self, _ImomoBase):
            raise TypeError
        kwargs.setdefault('session', object_session(self))
        if kwargs['session'] is None:
            raise ValueError
        return func(self, *args, **kwargs)
    return wrapper_session_required


class _SurrogatePKMixin(object):
    """Base mixin for tables with surrogate id.

    Attributes:
        id: Sequential autogenerated integer id.
    """
    @declared_attr
    def id(cls):
        """Defines an autogenerated id column.

        The name of the id sequence is related to the table name.
        """
        return Column(Integer,
                      Sequence('%s_id_seq' % cls.__name__.lower()),
                      primary_key=True)


class _ClassTableNameMixin(object):
    """Mixin that specifies the table name as equal to the class name after
    PascalCase to snake_case conversion.

    Attributes:
        ___tablename__: Name of the table in the relational database.
    """
    @declared_attr
    def __tablename__(cls):
        return strings.camel_to_snake(cls.__name__)


class _ImomoBase(_SurrogatePKMixin, _ClassTableNameMixin):
    """Standard base class for all database tables defined in the imomo schema.

    This includes the implementation of a surrogate pk which is always named
    id and the use of a snake case table name.
    """

    def to_jsonizable(self, exclude=None):
        """Standard serialization method for all database objects.

        This returns a dictionary with the values for all columns stored in
        the object, the keys are the attributes names as defined in the ORM
        class.

        If not all columns are required, or some of them shouldn't be returned,
        then a list of columns to be excluded can be defined.
        """
        exclude = exclude or ()
        jsonizable = dict(
            (column.name, getattr(self, column.name, getattr(self, column.name.lower())))
            for column in self.__table__.columns
            if column.name not in exclude
        )
        # Hack needed to avoid problem with NaN numeric values
        for key, value in jsonizable.items():
            if isinstance(value, float) and math.isnan(value):
                jsonizable[key] = None
        return jsonizable

    @classmethod
    def from_json(cls, json_object, translate_to_camel=True):
        """Standard de-serialization class method for all database models.
        """
        create_params = {}
        for column in cls.__table__.columns:
            column_name = strings.snake_to_camel(column.name) if translate_to_camel else column.name
            if column_name in json_object:
                create_params[column.name] = json_object[column_name]
                if isinstance(column.type, UTCDateTime):
                    if type(create_params[column.name]) is float:
                        create_params[column.name] =\
                            datetime.datetime.utcfromtimestamp(
                                create_params[column.name]).replace(
                                tzinfo=datetime.timezone.utc)
                    elif isinstance(create_params[column.name], datetime.datetime):
                        create_params[column.name] = \
                            create_params[column.name].replace(tzinfo=datetime.timezone.utc)
                elif isinstance(column.type, DateTime):
                    create_params[column.name] =\
                        datetime.datetime.utcfromtimestamp(
                            create_params[column.name])

        return cls(**create_params)

ImomoBase = declarative_base(cls=_ImomoBase)


class CVMixin(object):
    """Mixing that defines the attributes for a controlled vocabulary table
    according to the ODM 1.1 specification.

    Attributes:
        term: Controlled vocabulary term (255 char limit).
        definition: Textual definition of the term.
    """
    @declared_attr
    def term(cls):
        return Column('Term', String(255), unique=True)

    @declared_attr
    def definition(cls):
        return Column('Definition', Text)
