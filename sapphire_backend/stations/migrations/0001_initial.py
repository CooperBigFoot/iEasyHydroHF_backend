# Generated by Django 4.2.6 on 2023-10-26 08:39

import uuid

import django.core.validators
import django.db.models.deletion
import timezone_field.fields
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("organizations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Station",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(max_length=255, verbose_name="Slug")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("name", models.CharField(max_length=150, verbose_name="Station name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "station_type",
                    models.CharField(
                        choices=[("H", "Hydrological"), ("M", "Meteorological")],
                        default="H",
                        verbose_name="Station type",
                    ),
                ),
                ("station_code", models.CharField(max_length=100, verbose_name="Station code")),
                ("country", models.CharField(max_length=100, verbose_name="Country")),
                ("basin", models.CharField(max_length=150, verbose_name="Basin")),
                ("region", models.CharField(max_length=150, verbose_name="Region")),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(blank=True, null=True, verbose_name="Station timezone"),
                ),
                ("elevation", models.FloatField(blank=True, null=True, verbose_name="Elevation in meters")),
                ("is_automatic", models.BooleanField(default=False, verbose_name="Is automatic station?")),
                ("is_deleted", models.BooleanField(default=False, verbose_name="Is deleted?")),
                ("is_virtual", models.BooleanField(default=False, verbose_name="Is virtual?")),
                (
                    "measurement_time_step",
                    models.IntegerField(blank=True, null=True, verbose_name="Measurement time step in minutes"),
                ),
                (
                    "discharge_level_alarm",
                    models.FloatField(blank=True, null=True, verbose_name="Dangerous discharge level"),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stations",
                        to="organizations.organization",
                        to_field="uuid",
                        verbose_name="Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "Station",
                "verbose_name_plural": "Stations",
                "ordering": ["-name"],
            },
        ),
        migrations.CreateModel(
            name="Sensor",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("name", models.CharField(default="Default", max_length=100, verbose_name="Sensor name")),
                ("manufacturer", models.CharField(blank=True, max_length=150, verbose_name="Manufacturer")),
                ("identifier", models.CharField(blank=True, max_length=150, verbose_name="Sensor identifier")),
                ("installation_date", models.DateTimeField(blank=True, null=True, verbose_name="Installation date")),
                ("is_active", models.BooleanField(default=True, verbose_name="Is active?")),
                ("is_default", models.BooleanField(default=True, verbose_name="Is default?")),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sensors",
                        to="stations.station",
                        to_field="uuid",
                        verbose_name="Station",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sensor",
                "verbose_name_plural": "Sensors",
                "ordering": ["-name"],
            },
        ),
        migrations.AddIndex(
            model_name="station",
            index=models.Index(fields=["organization"], name="station_organization_idx"),
        ),
        migrations.AddIndex(
            model_name="station",
            index=models.Index(fields=["station_code"], name="station_code_idx"),
        ),
        migrations.AddIndex(
            model_name="station",
            index=models.Index(fields=["uuid"], name="station_uuid_idx"),
        ),
        migrations.AddConstraint(
            model_name="station",
            constraint=models.UniqueConstraint(
                models.F("station_code"), models.F("is_automatic"), name="station_code_is_automatic_unique"
            ),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(fields=["uuid"], name="sensor_uuid_idx"),
        ),
        migrations.AddIndex(
            model_name="sensor",
            index=models.Index(fields=["station"], name="sensor_station_idx"),
        ),
        migrations.AddConstraint(
            model_name="sensor",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("station", "is_default"),
                name="unique_default_sensor_per_station",
            ),
        ),
    ]
