# Generated by Django 5.0 on 2023-12-12 10:12

import uuid

import django.core.validators
import django.db.models.deletion
import timezone_field.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("organizations", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HydrologicalStation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("daily_forecast", models.BooleanField(default=False, verbose_name="Enable daily forecast")),
                ("pentad_forecast", models.BooleanField(default=False, verbose_name="Enable pentad forecast")),
                ("decadal_forecast", models.BooleanField(default=False, verbose_name="Enable decadal forecast")),
                ("monthly_forecast", models.BooleanField(default=False, verbose_name="Enable monthly forecast")),
                ("seasonal_forecast", models.BooleanField(default=False, verbose_name="Enable seasonal forecast")),
                ("name", models.CharField(blank=True, max_length=150, verbose_name="Station name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("station_code", models.CharField(max_length=100, verbose_name="Station code")),
                (
                    "station_type",
                    models.CharField(
                        choices=[("M", "Manual"), ("A", "Automatic")],
                        default="M",
                        max_length=2,
                        verbose_name="Station type",
                    ),
                ),
                (
                    "measurement_time_step",
                    models.IntegerField(blank=True, null=True, verbose_name="Measurement time step in minutes"),
                ),
                (
                    "discharge_level_alarm",
                    models.FloatField(blank=True, null=True, verbose_name="Dangerous discharge level"),
                ),
                (
                    "historical_discharge_minimum",
                    models.FloatField(blank=True, null=True, verbose_name="Historical minimal value of discharge"),
                ),
                (
                    "historical_discharge_maximum",
                    models.FloatField(blank=True, null=True, verbose_name="Historical maximal value of discharge"),
                ),
                (
                    "decadal_discharge_norm",
                    models.FloatField(blank=True, null=True, verbose_name="Decadal discharge norm"),
                ),
                (
                    "monthly_discharge_norm",
                    models.JSONField(blank=True, null=True, verbose_name="Monthly discharge norm"),
                ),
                ("is_deleted", models.BooleanField(default=False, verbose_name="Is deleted?")),
            ],
            options={
                "verbose_name": "Hydrological station",
                "verbose_name_plural": "Hydrological stations",
            },
        ),
        migrations.CreateModel(
            name="MeteorologicalStation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("name", models.CharField(blank=True, max_length=150, verbose_name="Station name")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("station_code", models.CharField(blank=True, max_length=100, verbose_name="Station code")),
                ("is_deleted", models.BooleanField(default=False, verbose_name="Is deleted?")),
            ],
            options={
                "verbose_name": "Meteorological station",
                "verbose_name_plural": "Meteorological stations",
            },
        ),
        migrations.CreateModel(
            name="Remark",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_date", models.DateTimeField(auto_now_add=True, verbose_name="Date created")),
                ("last_modified", models.DateTimeField(auto_now=True, verbose_name="Modified date")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("comment", models.TextField(verbose_name="Comment")),
                (
                    "hydro_station",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="remarks",
                        to="stations.hydrologicalstation",
                        to_field="uuid",
                        verbose_name="Hydrological station",
                    ),
                ),
                (
                    "meteo_station",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="remarks",
                        to="stations.meteorologicalstation",
                        to_field="uuid",
                        verbose_name="Meteorological station",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="remarks",
                        to=settings.AUTH_USER_MODEL,
                        to_field="uuid",
                    ),
                ),
            ],
            options={
                "verbose_name": "Remark",
                "verbose_name_plural": "Remarks",
                "ordering": ["-last_modified"],
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name="UUID")),
                ("name", models.CharField(max_length=150, verbose_name="Name")),
                ("country", models.CharField(max_length=100, verbose_name="Country")),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-90),
                            django.core.validators.MaxValueValidator(90),
                        ],
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(-180),
                            django.core.validators.MaxValueValidator(180),
                        ],
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(blank=True, null=True, verbose_name="Station timezone"),
                ),
                ("elevation", models.FloatField(blank=True, null=True, verbose_name="Elevation in meters")),
                (
                    "basin",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stations",
                        to="organizations.basin",
                        to_field="uuid",
                        verbose_name="Basin",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stations",
                        to="organizations.organization",
                        to_field="uuid",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="regions",
                        to="organizations.region",
                        to_field="uuid",
                        verbose_name="Region",
                    ),
                ),
            ],
            options={
                "verbose_name": "Site",
                "verbose_name_plural": "Sites",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="meteorologicalstation",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="meteo_stations",
                to="stations.site",
                to_field="uuid",
                verbose_name="Site",
            ),
        ),
        migrations.AddField(
            model_name="hydrologicalstation",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="hydro_stations",
                to="stations.site",
                to_field="uuid",
                verbose_name="Hydrological Station",
            ),
        ),
        migrations.AddConstraint(
            model_name="remark",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("hydro_station__isnull", True), ("meteo_station__isnull", False)),
                    models.Q(("hydro_station__isnull", False), ("meteo_station__isnull", True)),
                    _connector="OR",
                ),
                name="remark_has_hydro_or_meteo_station_set",
            ),
        ),
        migrations.AddIndex(
            model_name="site",
            index=models.Index(models.F("uuid"), name="site_uuid_idx"),
        ),
        migrations.AddIndex(
            model_name="meteorologicalstation",
            index=models.Index(models.F("uuid"), name="meteo_station_uuid_idx"),
        ),
        migrations.AddConstraint(
            model_name="meteorologicalstation",
            constraint=models.UniqueConstraint(models.F("station_code"), name="meteo_station_code_unique_cn"),
        ),
        migrations.AddIndex(
            model_name="hydrologicalstation",
            index=models.Index(models.F("uuid"), name="hydro_station_uuid_idx"),
        ),
        migrations.AddConstraint(
            model_name="hydrologicalstation",
            constraint=models.UniqueConstraint(
                models.F("station_code"), models.F("station_type"), name="hydro_station_code_type_unique_cn"
            ),
        ),
    ]
