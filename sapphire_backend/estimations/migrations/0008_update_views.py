# Generated by Django 5.1.1 on 2025-03-26 19:54

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('estimations', '0007_dischargecalculationperiod'),
    ]

    operations = [
        migrations.RunSQL(
            """
            DROP VIEW IF EXISTS metrics_bulk_data_hydro_manual;
            DROP VIEW IF EXISTS metrics_bulk_data_virtual;
            DROP VIEW IF EXISTS metrics_bulk_data_hydro_auto;
            DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average_virtual;
            DROP VIEW IF EXISTS estimations_water_discharge_decade_average_virtual;
            DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average;
            DROP VIEW IF EXISTS estimations_water_discharge_decade_average;
            DROP VIEW IF EXISTS estimations_water_discharge_daily_virtual;
            DROP VIEW IF EXISTS estimations_water_discharge_daily_average_virtual;
            DROP VIEW IF EXISTS estimations_water_discharge_daily_average;
            DROP VIEW IF EXISTS estimations_water_discharge_daily;
            DROP VIEW IF EXISTS estimations_water_level_decade_average;
            DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average;
            """,
            reverse_sql="""
            CREATE MATERIALIZED VIEW estimations_water_level_daily_average WITH (timescaledb.continuous)
                AS
                SELECT
                    time_bucket('1 day',  hm.timestamp_local) at time zone 'UTC' + '12 hours' as timestamp_local,
                                    CAST(NULL AS NUMERIC) as min_value,
                                    CASE 
                                        WHEN hm.value_type = 'A' THEN ROUND(AVG(hm.avg_value), 1)
                                        ELSE CEIL(AVG(hm.avg_value))
                                    END AS avg_value,
                                    CAST(NULL AS NUMERIC) as max_value,
                                    'cm' as unit,
                                    'E' as value_type,
                                    'WLDA'  as metric_name,
                                    ''  as sensor_identifier,
                                    '' as sensor_type,
                                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                     hm.metric_name = 'WLD'
                GROUP BY
                    time_bucket('1 day', hm.timestamp_local),
                    hm.station_id,
                    hm.value_type
                HAVING COUNT(hm.avg_value) > 1
                WITH NO DATA;

            CREATE OR REPLACE VIEW estimations_water_level_decade_average AS
                WITH data_ranges AS (
                    SELECT wlda.timestamp_local,
                           wlda.station_id,
                           wlda.value_type,
                           CASE
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                               ELSE 'third_decade'
                           END AS decade,
                           wlda.avg_value
                    FROM public.estimations_water_level_daily_average wlda
                ),
                decade_averages AS (
                    SELECT station_id,
                           EXTRACT(YEAR FROM timestamp_local) AS year,
                           EXTRACT(MONTH FROM timestamp_local) AS month,
                           decade,
                           CASE 
                               WHEN value_type = 'A' THEN ROUND(AVG(avg_value), 1)
                               ELSE CEIL(AVG(avg_value))
                           END AS avg_value
                    FROM data_ranges
                    GROUP BY station_id, year, month, decade, value_type
                ),
                representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                decade,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN decade = 'first_decade' THEN '05'
                                        WHEN decade = 'second_decade' THEN '15'
                                        ELSE '25'
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM decade_averages
                        )
                SELECT representative_timestamp AS timestamp_local,
                       CAST(NULL AS NUMERIC) AS min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'cm' AS unit,
                       'E' AS value_type,
                       'WLDCA' AS metric_name,
                       '' AS sensor_identifier,
                       '' AS sensor_type,
                       station_id
                FROM representative_days;
            
            create or replace view estimations_water_discharge_daily as
                SELECT
                    wld.timestamp_local ,
                    CAST(NULL AS NUMERIC) as min_value,
                    hydrological_round(dm.param_c * POWER((wld.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDD' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wld.station_id
                FROM
                    metrics_hydrologicalmetric wld
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wld.timestamp_local >= dm.valid_from_local AND (wld.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wld.station_id = dm.station_id
                WHERE
                    wld.metric_name = 'WLD' and wld.value_type='M';

            create or replace view estimations_water_discharge_daily_average as
                SELECT
                    wlda.timestamp_local,
                    CAST(NULL AS NUMERIC) as min_value,
                    hydrological_round(dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDDA' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wlda.station_id
                FROM
                    estimations_water_level_daily_average wlda
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wlda.timestamp_local >= dm.valid_from_local AND (wlda.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wlda.station_id = dm.station_id
                WHERE
                    wlda.metric_name = 'WLDA';

            CREATE OR REPLACE VIEW estimations_water_discharge_fiveday_average AS
            WITH data_ranges AS (
                    SELECT wdda.timestamp_local,
                            wdda.station_id,
                            CASE
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 5 THEN 'first_pentad'
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 6 AND 10 THEN 'second_pentad'
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 15 THEN 'third_pentad'
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 16 AND 20 THEN 'fourth_pentad'
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 21 AND 25 THEN 'fifth_pentad'
                                ELSE 'sixth_pentad'
                            END AS pentad,
                            wdda.avg_value
                    FROM public.estimations_water_discharge_daily_average wdda
                ),
                pentad_averages AS (
                    SELECT station_id,
                            EXTRACT(YEAR FROM timestamp_local) AS year,
                            EXTRACT(MONTH FROM timestamp_local) AS month,
                            pentad,
                            hydrological_round(AVG(avg_value)) AS avg_value
                    FROM data_ranges
                    GROUP BY station_id, year, month, pentad
                ),
                representative_days AS (
                        SELECT
                            station_id,
                            year,
                            month,
                            pentad,
                            avg_value,
                            -- Set the representative day manually
                            TO_TIMESTAMP(
                                year || '-' || month || '-' ||
                                CASE
                                    WHEN pentad = 'first_pentad' THEN 3
                                    WHEN pentad = 'second_pentad' THEN 8
                                    WHEN pentad = 'third_pentad' THEN 13
                                    WHEN pentad = 'fourth_pentad' THEN 18
                                    WHEN pentad = 'fifth_pentad' THEN 23
                                    ELSE 28
                                END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                            ) AS representative_timestamp
                        FROM pentad_averages
                    )
                SELECT representative_timestamp AS timestamp_local,
                        CAST(NULL AS NUMERIC) AS min_value,
                        avg_value,
                        CAST(NULL AS NUMERIC) AS max_value,
                        'm^3/s' AS unit,
                        'E' AS value_type,
                        'WDFA' AS metric_name,
                        '' AS sensor_identifier,
                        '' AS sensor_type,
                        station_id
                FROM representative_days;
            
            CREATE OR REPLACE VIEW estimations_water_discharge_decade_average AS
                    WITH data_ranges AS (
                        SELECT wdda.timestamp_local,
                                wdda.station_id,
                                CASE
                                    WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                                    WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                                    ELSE 'third_decade'
                                END AS decade,
                                wdda.avg_value
                        FROM public.estimations_water_discharge_daily_average wdda
                    ),
                    decade_averages AS (
                        SELECT station_id,
                                EXTRACT(YEAR FROM timestamp_local) AS year,
                                EXTRACT(MONTH FROM timestamp_local) AS month,
                                decade,
                                hydrological_round(AVG(avg_value)) AS avg_value
                        FROM data_ranges
                        GROUP BY station_id, year, month, decade
                    ),
                    representative_days AS (
                        SELECT
                            station_id,
                            year,
                            month,
                            decade,
                            avg_value,
                            -- Set the representative day manually
                            TO_TIMESTAMP(
                                year || '-' || month || '-' ||
                                CASE
                                    WHEN decade = 'first_decade' THEN '05'
                                    WHEN decade = 'second_decade' THEN '15'
                                    ELSE '25'
                                END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                            ) AS representative_timestamp
                        FROM decade_averages
                    )
                    SELECT representative_timestamp AS timestamp_local,
                            CAST(NULL AS NUMERIC) AS min_value,
                            avg_value,
                            CAST(NULL AS NUMERIC) AS max_value,
                            'm^3/s' AS unit,
                            'E' AS value_type,
                            'WDDCA' AS metric_name,
                            '' AS sensor_identifier,
                            '' AS sensor_type,
                            station_id
                    FROM representative_days;

            create or replace view  estimations_water_discharge_daily_virtual
                as
                SELECT
                    wdd.timestamp_local,
                    vsa.virtual_station_id as station_id,
                    hydrological_round(SUM(wdd.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    wdd.metric_name
                FROM
                    estimations_water_discharge_daily wdd
                JOIN
                    stations_virtualstationassociation vsa
                ON
                    wdd.station_id = vsa.hydro_station_id
                GROUP BY
                    wdd.timestamp_local,
                    vsa.virtual_station_id,
                    wdd.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );

            create or replace view estimations_water_discharge_daily_average_virtual
                as
                SELECT wdda.timestamp_local,
                    vsa.virtual_station_id                    as station_id,
                    hydrological_round(SUM(wdda.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s'                                   as unit,
                    'E'                                       as value_type,
                    wdda.metric_name
                FROM estimations_water_discharge_daily_average wdda
                JOIN
                    stations_virtualstationassociation vsa
                ON
                        wdda.station_id = vsa.hydro_station_id
                GROUP BY wdda.timestamp_local,
                        vsa.virtual_station_id,
                        wdda.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );
            create or replace view estimations_water_discharge_fiveday_average_virtual
                as
                SELECT wdfa.timestamp_local,
                    vsa.virtual_station_id                     as station_id,
                    hydrological_round(SUM(wdfa.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s'                                    as unit,
                    'E'                                        as value_type,
                    wdfa.metric_name
                FROM estimations_water_discharge_fiveday_average wdfa
                        JOIN
                    stations_virtualstationassociation vsa
                    ON
                        wdfa.station_id = vsa.hydro_station_id
                GROUP BY wdfa.timestamp_local,
                        vsa.virtual_station_id,
                        wdfa.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );
            create or replace view estimations_water_discharge_decade_average_virtual
                as
                SELECT wddca.timestamp_local,
                    vsa.virtual_station_id                     as station_id,
                    hydrological_round(SUM(wddca.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s'                                    as unit,
                    'E'                                        as value_type,
                    wddca.metric_name
                FROM estimations_water_discharge_decade_average wddca
                        JOIN
                    stations_virtualstationassociation vsa
                    ON
                        wddca.station_id = vsa.hydro_station_id
                GROUP BY wddca.timestamp_local,
                        vsa.virtual_station_id,
                        wddca.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );
            CREATE OR REPLACE VIEW metrics_bulk_data_hydro_auto AS
                SELECT station_id,
                    timestamp_local::timestamp without time zone,
                    MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN min_value END)   AS water_level_daily_min,
                    MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN avg_value END)   AS water_level_daily_average,
                    MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN max_value END)   AS water_level_daily_max,
                    MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN min_value END)   AS air_temperature_min,
                    MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN avg_value END)   AS air_temperature_average,
                    MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN max_value END)   AS air_temperature_max,
                    MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN min_value END)   AS water_temperature_min,
                    MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN avg_value END)   AS water_temperature_average,
                    MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN max_value END)   AS water_temperature_max,
                    MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END)  AS discharge_daily_average,
                    MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge,
                    MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                    FROM metrics_hydrologicalmetric
                    WHERE value_type = 'A'
                        and metric_name in ('WLD', 'WTO', 'ATO')
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                    FROM estimations_water_discharge_daily_average
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                    FROM estimations_water_discharge_fiveday_average
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                    FROM estimations_water_discharge_decade_average) AS sub
                where station_id IN (select distinct id from stations_hydrologicalstation where station_type = 'A')
                GROUP BY station_id, timestamp_local::timestamp without time zone;
            CREATE OR REPLACE VIEW metrics_bulk_data_virtual AS
                SELECT station_id,
                        timestamp_local::timestamp without time zone,
                        MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'E' THEN avg_value END)   AS discharge_daily,
                        MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge,
                        MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END) AS discharge_daily_average,
                        MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_daily_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_daily_average_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_fiveday_average_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_decade_average_virtual) AS sub
                GROUP BY station_id, timestamp_local::timestamp without time zone;
            CREATE OR REPLACE VIEW metrics_bulk_data_hydro_manual AS
                SELECT station_id,
                    timestamp_local::timestamp without time zone, -- Convert timestamp_local to timestamp without timezone
                    MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'M' THEN avg_value END)   AS water_level_daily,
                    MAX(CASE WHEN metric_name = 'WLDA' AND value_type = 'E' THEN avg_value END)  AS water_level_daily_average,
                    MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'M' THEN avg_value END)   AS discharge_measurement,
                    MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'E' THEN avg_value END)   AS discharge_daily,
                    MAX(CASE WHEN metric_name = 'RCSA' AND value_type = 'M' THEN avg_value END)  AS free_river_area,
                    MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge,
                    MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END)  AS discharge_daily_average,
                    MAX(CASE
                            WHEN metric_name = 'IPO' AND value_type = 'M'
                                THEN value_code || ':' || avg_value::text END)                   AS ice_phenomena,
                    MAX(CASE WHEN metric_name = 'WLDC' AND value_type = 'M' THEN avg_value END)  AS water_level_measurement,
                    MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge,
                            MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'M' THEN avg_value END)  AS air_temperature,
                    MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'M' THEN avg_value END)  AS water_temperature,
                    MAX(CASE
                            WHEN metric_name = 'PD' AND value_type = 'M'
                                THEN value_code || ':' || avg_value::text END)                   AS precipitation_daily
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, avg_value, value_code
                    FROM metrics_hydrologicalmetric
                    WHERE value_type = 'M'
                        and metric_name in ('WLD', 'RCSA', 'IPO', 'WTO', 'ATO', 'PD')
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                    FROM estimations_water_discharge_daily
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                    FROM estimations_water_level_daily_average
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                    FROM estimations_water_discharge_daily_average
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                    FROM estimations_water_discharge_fiveday_average
                    UNION ALL
                    SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                    FROM estimations_water_discharge_decade_average) AS sub
                where station_id IN (select distinct id from stations_hydrologicalstation where station_type = 'M')
                GROUP BY station_id, timestamp_local::timestamp without time zone;
                """
        ),
        migrations.RunSQL(
            """
           CREATE MATERIALIZED VIEW estimations_water_level_daily_average WITH (timescaledb.continuous)
            AS
            SELECT
                time_bucket('1 day', hm.timestamp_local) AT TIME ZONE 'UTC' + '12 hours' AS timestamp_local,
                CAST(NULL AS NUMERIC) AS min_value,
                CASE
                    WHEN hm.value_type = 'A' THEN ROUND(AVG(hm.avg_value), 1)
                    ELSE CEIL(AVG(hm.avg_value))
                END AS avg_value,
                CAST(NULL AS NUMERIC) AS max_value,
                'cm' AS unit,
                'E' AS value_type,
                'WLDA' AS metric_name,
                '' AS sensor_identifier,
                '' AS sensor_type,
                hm.station_id
            FROM public.metrics_hydrologicalmetric hm
            LEFT JOIN public.estimations_dischargecalculationperiod edp
                ON hm.station_id = edp.station_id
                AND hm.timestamp_local >= edp.start_date_local
                AND (edp.end_date_local IS NULL OR hm.timestamp_local < edp.end_date_local)
                AND (
                    -- Skip calculation if suspended
                    edp.state = 'SUSPENDED'
                    -- Skip calculation if manual with privodka only on the first day
                    OR (edp.state = 'MANUAL' AND edp.reason = 'PRIVODKA' AND DATE(hm.timestamp_local) = DATE(edp.start_date_local))
                )
            WHERE hm.metric_name = 'WLD'
                AND edp.id IS NULL  -- Only include rows where no calculation period applies
            GROUP BY time_bucket('1 day', hm.timestamp_local), hm.station_id, hm.value_type
            HAVING COUNT(hm.avg_value) > 1
            WITH NO DATA;
            """,
            reverse_sql="DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW estimations_water_discharge_daily AS
            SELECT
                wld.timestamp_local,
                CAST(NULL AS NUMERIC) AS min_value,
                hydrological_round(dm.param_c * POWER((wld.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                CAST(NULL AS NUMERIC) AS max_value,
                'm^3/s' AS unit,
                'E' AS value_type,
                'WDD' AS metric_name,
                '' AS sensor_identifier,
                '' AS sensor_type,
                wld.station_id
            FROM (
                SELECT * FROM metrics_hydrologicalmetric
                WHERE metric_name = 'WLD' AND value_type = 'M'
                UNION ALL
                SELECT * FROM metrics_hydrologicalmetric
                WHERE metric_name = 'WDD' AND value_type = 'O'
            ) wld
            LEFT JOIN public.estimations_dischargecalculationperiod edp
                ON wld.station_id = edp.station_id
                AND wld.timestamp_local >= edp.start_date_local
                AND (edp.end_date_local IS NULL OR wld.timestamp_local < edp.end_date_local)
            JOIN (
                SELECT
                    dm.*,
                    LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local
                FROM estimations_dischargemodel dm
            ) dm ON wld.timestamp_local >= dm.valid_from_local
                AND (wld.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL)
                AND wld.station_id = dm.station_id
            WHERE
                -- Skip calculation if suspended
                (edp.id IS NULL OR edp.state != 'SUSPENDED')
                -- Use override WDD when manual
                AND (edp.id IS NULL OR edp.state != 'MANUAL' OR wld.metric_name = 'WDD');
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_daily;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW estimations_water_discharge_daily_average AS
            SELECT
                wlda.timestamp_local,
                CAST(NULL AS NUMERIC) AS min_value,
                hydrological_round(dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                CAST(NULL AS NUMERIC) AS max_value,
                'm^3/s' AS unit,
                'E' AS value_type,
                'WDDA' AS metric_name,
                '' AS sensor_identifier,
                '' AS sensor_type,
                wlda.station_id
            FROM estimations_water_level_daily_average wlda
            LEFT JOIN public.estimations_dischargecalculationperiod edp
                ON wlda.station_id = edp.station_id
                AND wlda.timestamp_local >= edp.start_date_local
                AND (edp.end_date_local IS NULL OR wlda.timestamp_local < edp.end_date_local)
            JOIN (
                SELECT
                    dm.*,
                    LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local
                FROM estimations_dischargemodel dm
            ) dm ON wlda.timestamp_local >= dm.valid_from_local
                AND (wlda.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL)
                AND wlda.station_id = dm.station_id
            WHERE
                -- Skip calculation if suspended
                (edp.id IS NULL OR edp.state != 'SUSPENDED');
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_daily_average;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW estimations_water_discharge_fiveday_average AS
                WITH data_ranges AS (
                        SELECT wdda.timestamp_local,
                               wdda.station_id,
                               CASE
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 5 THEN 'first_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 6 AND 10 THEN 'second_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 15 THEN 'third_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 16 AND 20 THEN 'fourth_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 21 AND 25 THEN 'fifth_pentad'
                                   ELSE 'sixth_pentad'
                               END AS pentad,
                               wdda.avg_value
                        FROM public.estimations_water_discharge_daily_average wdda
                    ),
                    pentad_averages AS (
                        SELECT station_id,
                               EXTRACT(YEAR FROM timestamp_local) AS year,
                               EXTRACT(MONTH FROM timestamp_local) AS month,
                               pentad,
                               hydrological_round(AVG(avg_value)) AS avg_value
                        FROM data_ranges
                        GROUP BY station_id, year, month, pentad
                    ),
                    representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                pentad,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN pentad = 'first_pentad' THEN 3
                                        WHEN pentad = 'second_pentad' THEN 8
                                        WHEN pentad = 'third_pentad' THEN 13
                                        WHEN pentad = 'fourth_pentad' THEN 18
                                        WHEN pentad = 'fifth_pentad' THEN 23
                                        ELSE 28
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM pentad_averages
                        )
                    SELECT representative_timestamp AS timestamp_local,
                           CAST(NULL AS NUMERIC) AS min_value,
                           avg_value,
                           CAST(NULL AS NUMERIC) AS max_value,
                           'm^3/s' AS unit,
                           'E' AS value_type,
                           'WDFA' AS metric_name,
                           '' AS sensor_identifier,
                           '' AS sensor_type,
                           station_id
                    FROM representative_days;
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW estimations_water_discharge_decade_average AS
                WITH data_ranges AS (
                    SELECT wdda.timestamp_local,
                            wdda.station_id,
                            CASE
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                                WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                                ELSE 'third_decade'
                            END AS decade,
                            wdda.avg_value
                    FROM public.estimations_water_discharge_daily_average wdda
                ),
                decade_averages AS (
                    SELECT station_id,
                            EXTRACT(YEAR FROM timestamp_local) AS year,
                            EXTRACT(MONTH FROM timestamp_local) AS month,
                            decade,
                            hydrological_round(AVG(avg_value)) AS avg_value
                    FROM data_ranges
                    GROUP BY station_id, year, month, decade
                ),
                representative_days AS (
                    SELECT
                        station_id,
                        year,
                        month,
                        decade,
                        avg_value,
                        -- Set the representative day manually
                        TO_TIMESTAMP(
                            year || '-' || month || '-' ||
                            CASE
                                WHEN decade = 'first_decade' THEN '05'
                                WHEN decade = 'second_decade' THEN '15'
                                ELSE '25'
                            END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                        ) AS representative_timestamp
                    FROM decade_averages
                )
                SELECT representative_timestamp AS timestamp_local,
                        CAST(NULL AS NUMERIC) AS min_value,
                        avg_value,
                        CAST(NULL AS NUMERIC) AS max_value,
                        'm^3/s' AS unit,
                        'E' AS value_type,
                        'WDDCA' AS metric_name,
                        '' AS sensor_identifier,
                        '' AS sensor_type,
                        station_id
                FROM representative_days;
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_decade_average;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW estimations_water_level_decade_average AS
                WITH data_ranges AS (
                    SELECT wlda.timestamp_local,
                           wlda.station_id,
                           wlda.value_type,
                           CASE
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                               ELSE 'third_decade'
                           END AS decade,
                           wlda.avg_value
                    FROM public.estimations_water_level_daily_average wlda
                ),
                decade_averages AS (
                    SELECT station_id,
                           EXTRACT(YEAR FROM timestamp_local) AS year,
                           EXTRACT(MONTH FROM timestamp_local) AS month,
                           decade,
                           CASE 
                               WHEN value_type = 'A' THEN ROUND(AVG(avg_value), 1)
                               ELSE CEIL(AVG(avg_value))
                           END AS avg_value
                    FROM data_ranges
                    GROUP BY station_id, year, month, decade, value_type
                ),
                representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                decade,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN decade = 'first_decade' THEN '05'
                                        WHEN decade = 'second_decade' THEN '15'
                                        ELSE '25'
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM decade_averages
                        )
                SELECT representative_timestamp AS timestamp_local,
                       CAST(NULL AS NUMERIC) AS min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'cm' AS unit,
                       'E' AS value_type,
                       'WLDCA' AS metric_name,
                       '' AS sensor_identifier,
                       '' AS sensor_type,
                       station_id
                FROM representative_days;
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_level_decade_average;"
        ),
        migrations.RunSQL(
            """
            create or replace view  estimations_water_discharge_daily_virtual
                as
                SELECT
                    wdd.timestamp_local,
                    vsa.virtual_station_id as station_id,
                    hydrological_round(SUM(wdd.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    wdd.metric_name
                FROM
                    estimations_water_discharge_daily wdd
                JOIN
                    stations_virtualstationassociation vsa
                ON
                    wdd.station_id = vsa.hydro_station_id
                GROUP BY
                    wdd.timestamp_local,
                    vsa.virtual_station_id,
                    wdd.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_daily_virtual;"
        ),
        migrations.RunSQL(
            """
            create or replace view estimations_water_discharge_daily_average_virtual
                as
                SELECT wdda.timestamp_local,
                       vsa.virtual_station_id                    as station_id,
                       hydrological_round(SUM(wdda.avg_value * (vsa.weight / 100.0))) AS avg_value,
                       'm^3/s'                                   as unit,
                       'E'                                       as value_type,
                       wdda.metric_name
                FROM estimations_water_discharge_daily_average wdda
                JOIN
                     stations_virtualstationassociation vsa
                ON
                         wdda.station_id = vsa.hydro_station_id
                GROUP BY wdda.timestamp_local,
                         vsa.virtual_station_id,
                         wdda.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    );
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_daily_average_virtual;"
        ),
        migrations.RunSQL(
            """
            create or replace view estimations_water_discharge_fiveday_average_virtual
                as
                SELECT wdfa.timestamp_local,
                       vsa.virtual_station_id                     as station_id,
                       hydrological_round(SUM(wdfa.avg_value * (vsa.weight / 100.0))) AS avg_value,
                       'm^3/s'                                    as unit,
                       'E'                                        as value_type,
                       wdfa.metric_name
                FROM estimations_water_discharge_fiveday_average wdfa
                         JOIN
                     stations_virtualstationassociation vsa
                     ON
                         wdfa.station_id = vsa.hydro_station_id
                GROUP BY wdfa.timestamp_local,
                         vsa.virtual_station_id,
                         wdfa.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    )
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average_virtual;"
        ),
        migrations.RunSQL(
            """
            create or replace view estimations_water_discharge_decade_average_virtual
                as
                SELECT wddca.timestamp_local,
                    vsa.virtual_station_id                     as station_id,
                    hydrological_round(SUM(wddca.avg_value * (vsa.weight / 100.0))) AS avg_value,
                    'm^3/s'                                    as unit,
                    'E'                                        as value_type,
                    wddca.metric_name
                FROM estimations_water_discharge_decade_average wddca
                        JOIN
                    stations_virtualstationassociation vsa
                    ON
                        wddca.station_id = vsa.hydro_station_id
                GROUP BY wddca.timestamp_local,
                        vsa.virtual_station_id,
                        wddca.metric_name
                HAVING
                    COUNT(DISTINCT vsa.hydro_station_id) = (
                        SELECT COUNT(*)
                        FROM stations_virtualstationassociation
                        WHERE virtual_station_id = vsa.virtual_station_id
                    )
            """,
            reverse_sql="DROP VIEW IF EXISTS estimations_water_discharge_decade_average_virtual;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW metrics_bulk_data_hydro_manual AS
                SELECT station_id,
                       timestamp_local::timestamp without time zone, -- Convert timestamp_local to timestamp without timezone
                       MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'M' THEN avg_value END)   AS water_level_daily,
                       MAX(CASE WHEN metric_name = 'WLDA' AND value_type = 'E' THEN avg_value END)  AS water_level_daily_average,
                       MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'M' THEN avg_value END)   AS discharge_measurement,
                       MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'E' THEN avg_value END)   AS discharge_daily,
                       MAX(CASE WHEN metric_name = 'RCSA' AND value_type = 'M' THEN avg_value END)  AS free_river_area,
                       MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge,
                       MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END)  AS discharge_daily_average,
                       MAX(CASE
                               WHEN metric_name = 'IPO' AND value_type = 'M'
                                   THEN value_code || ':' || avg_value::text END)                   AS ice_phenomena,
                       MAX(CASE WHEN metric_name = 'WLDC' AND value_type = 'M' THEN avg_value END)  AS water_level_measurement,
                       MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge,
                              MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'M' THEN avg_value END)  AS air_temperature,
                       MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'M' THEN avg_value END)  AS water_temperature,
                       MAX(CASE
                               WHEN metric_name = 'PD' AND value_type = 'M'
                                   THEN value_code || ':' || avg_value::text END)                   AS precipitation_daily
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, avg_value, value_code
                      FROM metrics_hydrologicalmetric
                      WHERE value_type = 'M'
                        and metric_name in ('WLD', 'RCSA', 'IPO', 'WTO', 'ATO', 'PD')
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                      FROM estimations_water_discharge_daily
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                      FROM estimations_water_level_daily_average
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                      FROM estimations_water_discharge_daily_average
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                      FROM estimations_water_discharge_fiveday_average
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, avg_value, NULL as value_code
                      FROM estimations_water_discharge_decade_average) AS sub
                where station_id IN (select distinct id from stations_hydrologicalstation where station_type = 'M')
                GROUP BY station_id, timestamp_local::timestamp without time zone;
            """,
            reverse_sql="DROP VIEW IF EXISTS metrics_bulk_data_hydro_manual;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW metrics_bulk_data_virtual AS
                SELECT station_id,
                        timestamp_local::timestamp without time zone,
                        MAX(CASE WHEN metric_name = 'WDD' AND value_type = 'E' THEN avg_value END)   AS discharge_daily,
                        MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge,
                        MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END) AS discharge_daily_average,
                        MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_daily_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_daily_average_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_fiveday_average_virtual
                        UNION ALL
                        SELECT station_id, timestamp_local, metric_name, value_type, avg_value
                        FROM estimations_water_discharge_decade_average_virtual) AS sub
                GROUP BY station_id, timestamp_local::timestamp without time zone;
            """,
            reverse_sql="DROP VIEW IF EXISTS metrics_bulk_data_virtual;"
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW metrics_bulk_data_hydro_auto AS
                SELECT station_id,
                       timestamp_local::timestamp without time zone,
                       MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN min_value END)   AS water_level_daily_min,
                       MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN avg_value END)   AS water_level_daily_average,
                       MAX(CASE WHEN metric_name = 'WLD' AND value_type = 'A' THEN max_value END)   AS water_level_daily_max,
                       MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN min_value END)   AS air_temperature_min,
                       MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN avg_value END)   AS air_temperature_average,
                       MAX(CASE WHEN metric_name = 'ATO' AND value_type = 'A' THEN max_value END)   AS air_temperature_max,
                       MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN min_value END)   AS water_temperature_min,
                       MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN avg_value END)   AS water_temperature_average,
                       MAX(CASE WHEN metric_name = 'WTO' AND value_type = 'A' THEN max_value END)   AS water_temperature_max,
                       MAX(CASE WHEN metric_name = 'WDDA' AND value_type = 'E' THEN avg_value END)  AS discharge_daily_average,
                       MAX(CASE WHEN metric_name = 'WDFA' AND value_type = 'E' THEN avg_value END)  AS fiveday_discharge,
                       MAX(CASE WHEN metric_name = 'WDDCA' AND value_type = 'E' THEN avg_value END) AS decade_discharge
                FROM (SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                      FROM metrics_hydrologicalmetric
                      WHERE value_type = 'A'
                        and metric_name in ('WLD', 'WTO', 'ATO')
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                      FROM estimations_water_discharge_daily_average
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                      FROM estimations_water_discharge_fiveday_average
                      UNION ALL
                      SELECT station_id, timestamp_local, metric_name, value_type, min_value, avg_value, max_value
                      FROM estimations_water_discharge_decade_average) AS sub
                where station_id IN (select distinct id from stations_hydrologicalstation where station_type = 'A')
                GROUP BY station_id, timestamp_local::timestamp without time zone;
            """,
            reverse_sql="DROP VIEW IF EXISTS metrics_bulk_data_hydro_auto;"
        )
    ]
