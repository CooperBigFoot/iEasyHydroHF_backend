# Generated by Django 5.0 on 2024-02-23 14:10

from django.db import migrations, models

FUNCTION_REFRESH_DISCHARGE_VIEWS_FUNCTION_SQL = ("""
CREATE OR REPLACE FUNCTION refresh_discharge_estimation_views()
RETURNS TRIGGER AS
$$
BEGIN
    -- Refresh other views
    REFRESH MATERIALIZED VIEW estimations_water_level_daily_average;
    REFRESH MATERIALIZED VIEW estimations_water_discharge_daily_average;
    REFRESH MATERIALIZED VIEW estimations_water_discharge_fiveday_average;
    REFRESH MATERIALIZED VIEW estimations_water_discharge_decade_average;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;
""", "DROP FUNCTION IF EXISTS refresh_discharge_estimation_views CASCADE;")

TRIGGER_ON_METRICS_SQL = ("""
CREATE TRIGGER refresh_wlda_trigger
AFTER INSERT OR UPDATE OR DELETE ON metrics_hydrologicalmetric
EXECUTE FUNCTION refresh_discharge_estimation_views();
""", "DROP TRIGGER IF EXISTS refresh_wlda_trigger ON estimations_water_level_daily_average;")

# SQL to create the trigger on the table
TRIGGER_ON_DISCHARGE_MODEL_SQL = ("""
CREATE TRIGGER refresh_discharge_estimation_trigger_table
AFTER INSERT OR UPDATE OR DELETE ON estimations_dischargemodel
EXECUTE FUNCTION refresh_discharge_estimation_views();
""", "DROP TRIGGER IF EXISTS refresh_discharge_estimation_trigger_table ON estimations_dischargemodel;")


class Migration(migrations.Migration):
    dependencies = [
        ('estimations', '0001_initial'),
        ("metrics", "0003_create_hypertables"),
    ]

    operations = [
        migrations.RunSQL(
            sql=[(
                """
                CREATE MATERIALIZED VIEW estimations_water_level_daily_average AS
                SELECT
                    DATE_TRUNC('day', hm.timestamp) as timestamp ,
                    hm.min_value,
                    CEIL(AVG(hm.avg_value)) AS avg_value,
                    hm2.avg_value AS original_value,
                    hm.max_value,
                    'cm' as unit,
                    'E' as value_type,
                    'WLDA'  as metric_name,
                    ''  as sensor_identifier,
                    '' as sensor_type,
                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                LEFT JOIN public.metrics_hydrologicalmetric hm2 ON DATE_TRUNC('day', hm.timestamp) = DATE_TRUNC('day', hm2.timestamp) AND hm2.metric_name = 'WLDA' and hm2.value_type = 'I' and hm2.sensor_identifier=hm.sensor_identifier and hm2.sensor_type=hm.sensor_type AND hm2.station_id = hm.station_id
                WHERE
                     hm.metric_name = 'WLD'
                GROUP BY
                    DATE_TRUNC('day', hm.timestamp),
                    hm.station_id,
                    hm.min_value,
                    hm.max_value,
                    hm2.avg_value;

              """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create materialized view estimations_water_discharge_daily_average as
                SELECT
                    wlda.timestamp ,
                    wlda.min_value,
                    dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b) AS avg_value,
                    hm.avg_value AS original_value,
                    wlda.max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDDA' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wlda.station_id
                FROM
                    estimations_water_level_daily_average wlda
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_valid_from,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wlda.timestamp >= dm.valid_from AND (wlda.timestamp < dm.next_valid_from OR dm.next_valid_from IS NULL) AND wlda.station_id = dm.station_id
                LEFT JOIN metrics_hydrologicalmetric hm ON hm.metric_name = 'WDDA' and hm.value_type = 'I' and DATE_TRUNC('day',wlda.timestamp) = DATE_TRUNC('day',hm.timestamp) and hm.sensor_identifier=wlda.sensor_identifier and hm.sensor_type=wlda.sensor_type AND hm.station_id = wlda.station_id
                WHERE
                    wlda.metric_name = 'WLDA';
              """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create materialized view estimations_water_discharge_fiveday_average as
                WITH five_day_averages AS (
                    SELECT
                        wdda.timestamp AS timestamp,
                        wdda.min_value,
                        CASE
                            WHEN COUNT(CASE WHEN wdda.avg_value != 'Nan' THEN 1 END) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) > 0
                            THEN AVG(CASE WHEN wdda.avg_value != 'Nan' THEN wdda.avg_value ELSE NULL END) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING)
                            ELSE NULL
                        END AS avg_value,
                        hm.avg_value AS original_value,
                        wdda.max_value,
                        'm^3/s' as unit,
                        'E' as value_type,
                        'WDFA' as metric_name,
                        '' as sensor_identifier,
                        '' as sensor_type,
                        wdda.station_id,
                        ARRAY_TO_STRING(ARRAY_AGG(ROW(wdda.timestamp, wdda.avg_value)) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING),  ',')  AS used_values
                    FROM
                        public.estimations_water_discharge_daily_average wdda
                    LEFT JOIN public.metrics_hydrologicalmetric hm ON hm.metric_name = 'WDFA' and hm.value_type = 'I' and DATE_TRUNC('day',wdda.timestamp) = DATE_TRUNC('day',hm.timestamp) and hm.sensor_identifier=wdda.sensor_identifier and hm.sensor_type=wdda.sensor_type AND hm.station_id = wdda.station_id
                )
                SELECT *
                FROM five_day_averages
                WHERE EXTRACT(DAY FROM timestamp) IN (3, 8, 13, 18, 23, 28);
                """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create materialized view estimations_water_discharge_decade_average as
                WITH decade_averages AS (
                    SELECT
                        wdda.timestamp AS timestamp,
                        wdda.min_value,
                        CASE
                            WHEN COUNT(CASE WHEN wdda.avg_value != 'Nan' THEN 1 END) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 4 PRECEDING AND 5 FOLLOWING) > 0
                            THEN AVG(CASE WHEN wdda.avg_value != 'Nan' THEN wdda.avg_value ELSE NULL END) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 4 PRECEDING AND 5 FOLLOWING)
                            ELSE NULL
                        END AS avg_value,
                        hm.avg_value AS original_value,
                        wdda.max_value,
                        'm^3/s' as unit,
                        'E' as value_type,
                        'WDFA' as metric_name,
                        '' as sensor_identifier,
                        '' as sensor_type,
                        wdda.station_id,
                        ARRAY_TO_STRING(ARRAY_AGG(ROW(wdda.timestamp, wdda.avg_value)) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 4 PRECEDING AND 5 FOLLOWING),  ',')  AS used_values
                    FROM
                        public.estimations_water_discharge_daily_average wdda
                    LEFT JOIN public.metrics_hydrologicalmetric hm ON hm.metric_name = 'WDDCA' and hm.value_type = 'I' and DATE_TRUNC('day',wdda.timestamp) = DATE_TRUNC('day',hm.timestamp) and hm.sensor_identifier=wdda.sensor_identifier and hm.sensor_type=wdda.sensor_type AND hm.station_id = wdda.station_id
                )
                SELECT *
                FROM decade_averages
                WHERE EXTRACT(DAY FROM timestamp) IN (5, 15, 25);
                """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_discharge_decade_average CASCADE;")],
        ),
        # build triggers

        # migrations.RunSQL(sql=FUNCTION_REFRESH_DISCHARGE_VIEWS_FUNCTION_SQL[0],
        #                   reverse_sql=FUNCTION_REFRESH_DISCHARGE_VIEWS_FUNCTION_SQL[1]),
        # migrations.RunSQL(sql=TRIGGER_ON_METRICS_SQL[0], reverse_sql=TRIGGER_ON_METRICS_SQL[1]),
        # migrations.RunSQL(sql=TRIGGER_ON_DISCHARGE_MODEL_SQL[0], reverse_sql=TRIGGER_ON_DISCHARGE_MODEL_SQL[1]),
        migrations.RunSQL(sql=
                          """
                          create or replace view metrics_hydrologicalmetric_all as
                            select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
                            from public.estimations_water_level_daily_average
                            union
                            select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
                            from public.estimations_water_discharge_daily_average
                            union
                            select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
                            from public.estimations_water_discharge_fiveday_average
                            union
                            select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
                            from public.estimations_water_discharge_decade_average
                            union
                            select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
                            from public.metrics_hydrologicalmetric;
                            """, reverse_sql="DROP VIEW IF EXISTS metrics_hydrologicalmetric_all;")

    ]
