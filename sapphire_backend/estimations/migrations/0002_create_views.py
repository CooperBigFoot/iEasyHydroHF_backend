# Generated by Django 5.0 on 2024-02-23 14:10

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ('estimations', '0001_initial'),
        ("metrics", "0003_create_hypertables"),
    ]
    operations = [
        migrations.RunSQL(
            sql=[(
                """
                CREATE MATERIALIZED VIEW estimations_water_level_daily_average WITH (timescaledb.continuous)
                AS
                SELECT
                    time_bucket('1 day',  hm.timestamp_local) at time zone 'UTC' + '12 hours' as timestamp_local,
                                    CAST(NULL AS NUMERIC) as min_value,
                                    CEIL(AVG(hm.avg_value)) AS avg_value,
                                    CAST(NULL AS NUMERIC) as max_value,
                                    'cm' as unit,
                                    'E' as value_type,
                                    'WLDA'  as metric_name,
                                    ''  as sensor_identifier,
                                    '' as sensor_type,
                                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                     hm.metric_name = 'WLD'
                GROUP BY
                    time_bucket('1 day', hm.timestamp_local),
                    hm.station_id
                WITH NO DATA;
              """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily as
                SELECT
                    wld.timestamp_local ,
                    CAST(NULL AS NUMERIC) as min_value,
                    dm.param_c * POWER((wld.avg_value + dm.param_a), dm.param_b) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDD' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wld.station_id
                FROM
                    metrics_hydrologicalmetric wld
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wld.timestamp_local >= dm.valid_from_local AND (wld.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wld.station_id = dm.station_id
                WHERE
                    wld.metric_name = 'WLD' and wld.value_type='M';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily_average as
                SELECT
                    wlda.timestamp_local,
                    CAST(NULL AS NUMERIC) as min_value,
                    dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDDA' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wlda.station_id
                FROM
                    estimations_water_level_daily_average wlda
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wlda.timestamp_local >= dm.valid_from_local AND (wlda.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wlda.station_id = dm.station_id
                WHERE
                    wlda.metric_name = 'WLDA';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_discharge_fiveday_average AS
                WITH data_ranges AS
                 (SELECT wdda.timestamp_local AS timestamp_local,
                         wdda.station_id,
                         CASE
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 5 THEN 'first_pentad'
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 6 AND 10 THEN 'second_pentad'
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 15 THEN 'third_pentad'
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 16 AND 20 THEN 'fourth_pentad'
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 21 AND 25 THEN 'fifth_pentad'
                             WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 26 AND EXTRACT(DAY FROM
                                                                                                (DATE_TRUNC('month', wdda.timestamp_local) +
                                                                                                 INTERVAL '1 month' -
                                                                                                 INTERVAL '1 day'))
                                 THEN 'sixth_pentad'
                             END AS pentad,
                         wdda.avg_value
                  FROM public.estimations_water_discharge_daily_average wdda),
             pentad_averages AS (SELECT timestamp_local,
                                        station_id,
                                        AVG(avg_value) OVER (
                                            PARTITION BY station_id, EXTRACT(YEAR FROM timestamp_local), EXTRACT(MONTH FROM timestamp_local), pentad
                                            ) AS avg_value
                                 FROM data_ranges)
                SELECT timestamp_local,
                       CAST(NULL AS NUMERIC) AS min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'm^3/s'               AS unit,
                       'E'                   AS value_type,
                       'WDFA'               AS metric_name,
                       ''                    AS sensor_identifier,
                       ''                    AS sensor_type,
                       station_id
                FROM pentad_averages
                WHERE EXTRACT(DAY FROM timestamp_local) IN (3, 8, 13, 18, 23, 28);
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_discharge_decade_average AS
                WITH data_ranges AS (
                    SELECT wdda.timestamp_local AS timestamp_local,
                           wdda.station_id,
                           CASE
                               WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                               WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                               WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 21 AND EXTRACT(DAY FROM (DATE_TRUNC('month', wdda.timestamp_local) + INTERVAL '1 month' - INTERVAL '1 day')) THEN 'third_decade'
                           END AS decade,
                           wdda.avg_value
                    FROM public.estimations_water_discharge_daily_average wdda
                ),
                decade_averages AS (
                    SELECT timestamp_local,
                           station_id,
                           AVG(avg_value) OVER (
                               PARTITION BY station_id, EXTRACT(YEAR FROM timestamp_local), EXTRACT(MONTH FROM timestamp_local), decade
                           ) AS avg_value
                    FROM data_ranges
                )
                SELECT timestamp_local,
                       CAST(NULL AS NUMERIC) as min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'm^3/s' AS unit,
                       'E' AS value_type,
                       'WDDCA' AS metric_name,
                       '' AS sensor_identifier,
                       '' AS sensor_type,
                       station_id
                FROM decade_averages
                WHERE EXTRACT(DAY FROM timestamp_local) IN (5, 15, 25);
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_level_decade_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_level_decade_average AS
                WITH data_ranges AS (SELECT wlda.timestamp_local AS timestamp_local,
                                            wlda.station_id,
                                            CASE
                                                WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                                                WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                                                WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 21 AND EXTRACT(DAY FROM
                                                                                                                   (DATE_TRUNC('month', wlda.timestamp_local) +
                                                                                                                    INTERVAL '1 month' -
                                                                                                                    INTERVAL '1 day'))
                                                    THEN 'third_decade'
                                                END              AS decade,
                                            wlda.avg_value
                                     FROM public.estimations_water_level_daily_average wlda),
                     decade_averages AS (SELECT timestamp_local,
                                                station_id,
                                                CEIL(AVG(avg_value) OVER (
                                                    PARTITION BY station_id, EXTRACT(YEAR FROM timestamp_local), EXTRACT(MONTH FROM timestamp_local), decade
                                                    )) AS avg_value
                                         FROM data_ranges)
                SELECT timestamp_local,
                       CAST(NULL AS NUMERIC) as min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'cm'                  as unit,
                       'E'                   as value_type,
                       'WLDCA'               as metric_name,
                       ''                    as sensor_identifier,
                       ''                    as sensor_type,
                       station_id
                FROM decade_averages
                WHERE EXTRACT(DAY FROM timestamp_local) IN (5, 15, 25);
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_level_decade_average CASCADE;")],
        ),
    ]
