# Generated by Django 5.0 on 2024-02-23 14:10

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ('estimations', '0001_initial'),
        ("metrics", "0003_create_hypertables"),
    ]
    operations = [
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION hydrological_round(number numeric)
            RETURNS numeric AS $$
            DECLARE
                result numeric;
                exponent int;
                scale_factor numeric;
                scaled_number numeric;
            BEGIN
                IF number = 0 THEN
                    RETURN 0.000;
                END IF;

                IF number < 1.0 THEN
                    -- If the number is less than 1, round it to three decimal places directly
                    result := ROUND(number, 3);
                ELSE
                    -- Determine the exponent to scale the number to 1 <= number < 10
                    exponent := FLOOR(LOG10(ABS(number)));

                    -- Calculate the scale factor
                    scale_factor := POWER(10, 2 - exponent);

                    -- Scale, round, and then rescale the number
                    scaled_number := number * scale_factor;
                    result := ROUND(scaled_number) / scale_factor;
                END IF;

                RETURN result;
            END;
            $$ LANGUAGE plpgsql;
            """,
            reverse_sql="DROP FUNCTION IF EXISTS hydrological_round(numeric);"
        ),
        migrations.RunSQL(
            sql=[(
                """
                CREATE MATERIALIZED VIEW estimations_water_level_daily_average WITH (timescaledb.continuous)
                AS
                SELECT
                    time_bucket('1 day',  hm.timestamp_local) at time zone 'UTC' + '12 hours' as timestamp_local,
                                    CAST(NULL AS NUMERIC) as min_value,
                                    CEIL(AVG(hm.avg_value)) AS avg_value,
                                    CAST(NULL AS NUMERIC) as max_value,
                                    'cm' as unit,
                                    'E' as value_type,
                                    'WLDA'  as metric_name,
                                    ''  as sensor_identifier,
                                    '' as sensor_type,
                                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                     hm.metric_name = 'WLD'
                GROUP BY
                    time_bucket('1 day', hm.timestamp_local),
                    hm.station_id
                HAVING COUNT(hm.avg_value) > 1
                WITH NO DATA;
              """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily as
                SELECT
                    wld.timestamp_local ,
                    CAST(NULL AS NUMERIC) as min_value,
                    hydrological_round(dm.param_c * POWER((wld.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDD' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wld.station_id
                FROM
                    metrics_hydrologicalmetric wld
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wld.timestamp_local >= dm.valid_from_local AND (wld.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wld.station_id = dm.station_id
                WHERE
                    wld.metric_name = 'WLD' and wld.value_type='M';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily_average as
                SELECT
                    wlda.timestamp_local,
                    CAST(NULL AS NUMERIC) as min_value,
                    hydrological_round(dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b)) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDDA' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wlda.station_id
                FROM
                    estimations_water_level_daily_average wlda
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from_local) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_valid_from_local,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from_local) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wlda.timestamp_local >= dm.valid_from_local AND (wlda.timestamp_local < dm.next_valid_from_local OR dm.next_valid_from_local IS NULL) AND wlda.station_id = dm.station_id
                WHERE
                    wlda.metric_name = 'WLDA';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_discharge_fiveday_average AS
                WITH data_ranges AS (
                        SELECT wdda.timestamp_local,
                               wdda.station_id,
                               CASE
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 5 THEN 'first_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 6 AND 10 THEN 'second_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 15 THEN 'third_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 16 AND 20 THEN 'fourth_pentad'
                                   WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 21 AND 25 THEN 'fifth_pentad'
                                   ELSE 'sixth_pentad'
                               END AS pentad,
                               wdda.avg_value
                        FROM public.estimations_water_discharge_daily_average wdda
                    ),
                    pentad_averages AS (
                        SELECT station_id,
                               EXTRACT(YEAR FROM timestamp_local) AS year,
                               EXTRACT(MONTH FROM timestamp_local) AS month,
                               pentad,
                               hydrological_round(AVG(avg_value)) AS avg_value
                        FROM data_ranges
                        GROUP BY station_id, year, month, pentad
                    ),
                    representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                pentad,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN pentad = 'first_pentad' THEN 3
                                        WHEN pentad = 'second_pentad' THEN 8
                                        WHEN pentad = 'third_pentad' THEN 13
                                        WHEN pentad = 'fourth_pentad' THEN 18
                                        WHEN pentad = 'fifth_pentad' THEN 23
                                        ELSE 28
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM pentad_averages
                        )
                    SELECT representative_timestamp AS timestamp_local,
                           CAST(NULL AS NUMERIC) AS min_value,
                           avg_value,
                           CAST(NULL AS NUMERIC) AS max_value,
                           'm^3/s' AS unit,
                           'E' AS value_type,
                           'WDFA' AS metric_name,
                           '' AS sensor_identifier,
                           '' AS sensor_type,
                           station_id
                    FROM representative_days
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_discharge_decade_average AS
                        WITH data_ranges AS (
                            SELECT wdda.timestamp_local,
                                   wdda.station_id,
                                   CASE
                                       WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                                       WHEN EXTRACT(DAY FROM wdda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                                       ELSE 'third_decade'
                                   END AS decade,
                                   wdda.avg_value
                            FROM public.estimations_water_discharge_daily_average wdda
                        ),
                        decade_averages AS (
                            SELECT station_id,
                                   EXTRACT(YEAR FROM timestamp_local) AS year,
                                   EXTRACT(MONTH FROM timestamp_local) AS month,
                                   decade,
                                   hydrological_round(AVG(avg_value)) AS avg_value
                            FROM data_ranges
                            GROUP BY station_id, year, month, decade
                        ),
                        representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                decade,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN decade = 'first_decade' THEN '05'
                                        WHEN decade = 'second_decade' THEN '15'
                                        ELSE '25'
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM decade_averages
                        )
                        SELECT representative_timestamp AS timestamp_local,
                               CAST(NULL AS NUMERIC) AS min_value,
                               avg_value,
                               CAST(NULL AS NUMERIC) AS max_value,
                               'm^3/s' AS unit,
                               'E' AS value_type,
                               'WDDCA' AS metric_name,
                               '' AS sensor_identifier,
                               '' AS sensor_type,
                               station_id
                        FROM representative_days;
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_level_decade_average AS
                WITH data_ranges AS (
                    SELECT wlda.timestamp_local,
                           wlda.station_id,
                           CASE
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 1 AND 10 THEN 'first_decade'
                               WHEN EXTRACT(DAY FROM wlda.timestamp_local) BETWEEN 11 AND 20 THEN 'second_decade'
                               ELSE 'third_decade'
                           END AS decade,
                           wlda.avg_value
                    FROM public.estimations_water_level_daily_average wlda
                ),
                decade_averages AS (
                    SELECT station_id,
                           EXTRACT(YEAR FROM timestamp_local) AS year,
                           EXTRACT(MONTH FROM timestamp_local) AS month,
                           decade,
                           CEIL(AVG(avg_value)) AS avg_value
                    FROM data_ranges
                    GROUP BY station_id, year, month, decade
                ),
                representative_days AS (
                            SELECT
                                station_id,
                                year,
                                month,
                                decade,
                                avg_value,
                                -- Set the representative day manually
                                TO_TIMESTAMP(
                                    year || '-' || month || '-' ||
                                    CASE
                                        WHEN decade = 'first_decade' THEN '05'
                                        WHEN decade = 'second_decade' THEN '15'
                                        ELSE '25'
                                    END || ' 12:00:00', 'YYYY-MM-DD HH24:MI:SS'
                                ) AS representative_timestamp
                            FROM decade_averages
                        )
                SELECT representative_timestamp AS timestamp_local,
                       CAST(NULL AS NUMERIC) AS min_value,
                       avg_value,
                       CAST(NULL AS NUMERIC) AS max_value,
                       'cm' AS unit,
                       'E' AS value_type,
                       'WLDCA' AS metric_name,
                       '' AS sensor_identifier,
                       '' AS sensor_type,
                       station_id
                FROM representative_days;
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_level_decade_average CASCADE;")],
        ),
        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_water_temperature_daily AS
                SELECT
                    time_bucket('1 day', hm.timestamp_local) at time zone 'UTC' + '12 hours' as timestamp_local,
                    MIN(hm.avg_value) as min_value,
                    AVG(hm.avg_value) AS avg_value,
                    MAX(hm.avg_value) as max_value,
                    '°C' as unit,
                    'E' as value_type,
                    'WTO' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                    hm.metric_name = 'WTO'
                GROUP BY
                    time_bucket('1 day', hm.timestamp_local),
                    hm.station_id;
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_temperature_daily CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                CREATE OR REPLACE VIEW estimations_air_temperature_daily AS
                SELECT
                    time_bucket('1 day', hm.timestamp_local) at time zone 'UTC' + '12 hours' as timestamp_local,
                    MIN(hm.avg_value) as min_value,
                    AVG(hm.avg_value) AS avg_value,
                    MAX(hm.avg_value) as max_value,
                    '°C' as unit,
                    'E' as value_type,
                    'ATO' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                    hm.metric_name = 'ATO'
                GROUP BY
                    time_bucket('1 day', hm.timestamp_local),
                    hm.station_id;
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_air_temperature_daily CASCADE;")],
        ),
    ]
