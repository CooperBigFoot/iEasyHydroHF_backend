# Generated by Django 5.0 on 2024-02-23 14:10

from django.db import migrations, models

class Migration(migrations.Migration):
    dependencies = [
        ('estimations', '0001_initial'),
        ("metrics", "0003_create_hypertables"),
    ]
    #'Asia/Bishkek'
    operations = [
        migrations.RunSQL(
            sql=[(
                """
                CREATE MATERIALIZED VIEW estimations_water_level_daily_average WITH (timescaledb.continuous)
                AS
                SELECT
                    time_bucket('1 day', hm.timestamp) at time zone 'UTC' + '6 hours' as timestamp,
                                    CAST(NULL AS NUMERIC) as min_value,
                                    CEIL(AVG(hm.avg_value)) AS avg_value,
                                    CAST(NULL AS NUMERIC) as max_value,
                                    'cm' as unit,
                                    'E' as value_type,
                                    'WLDA'  as metric_name,
                                    ''  as sensor_identifier,
                                    '' as sensor_type,
                                    hm.station_id
                FROM
                    public.metrics_hydrologicalmetric hm
                WHERE
                     hm.metric_name = 'WLD' and hm.value_type='M'
                GROUP BY
                    time_bucket('1 day', hm.timestamp),
                    hm.station_id
                WITH NO DATA;
              """
            )],
            reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily_average CASCADE;")],
        ),
        # migrations.RunSQL(
        #     sql=[(
        #         """
        #         CREATE MATERIALIZED VIEW estimations_water_level_daily WITH (timescaledb.continuous)
        #         AS
        #         SELECT
        #             time_bucket('1 hour', hm.timestamp) as timestamp ,
        #                             CAST(NULL AS NUMERIC) as min_value,
        #                             MAX(hm.avg_value) AS avg_value,
        #                             CAST(NULL AS NUMERIC) as max_value,
        #                             'cm' as unit,
        #                             'M' as value_type,
        #                             'WLD'  as metric_name,
        #                             ''  as sensor_identifier,
        #                             '' as sensor_type,
        #                             hm.station_id
        #         FROM
        #             public.metrics_hydrologicalmetric hm
        #         WHERE
        #              hm.metric_name = 'WLD' and hm.value_type='M'
        #         GROUP BY
        #             time_bucket('1 hour', hm.timestamp),
        #             hm.station_id
        #         WITH NO DATA;
        #       """
        #     )],
        #     reverse_sql=[("DROP MATERIALIZED VIEW IF EXISTS estimations_water_level_daily CASCADE;")],
        # ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily as
                SELECT
                    wld.timestamp ,
                    CAST(NULL AS NUMERIC) as min_value,
                    dm.param_c * POWER((wld.avg_value + dm.param_a), dm.param_b) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDD' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wld.station_id
                FROM
                    metrics_hydrologicalmetric wld
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_valid_from,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wld.timestamp >= dm.valid_from AND (wld.timestamp < dm.next_valid_from OR dm.next_valid_from IS NULL) AND wld.station_id = dm.station_id
                WHERE
                    wld.metric_name = 'WLD' and wld.value_type='M';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_daily_average as
                SELECT
                    wlda.timestamp ,
                    CAST(NULL AS NUMERIC) as min_value,
                    dm.param_c * POWER((wlda.avg_value + dm.param_a), dm.param_b) AS avg_value,
                    CAST(NULL AS NUMERIC) as max_value,
                    'm^3/s' as unit,
                    'E' as value_type,
                    'WDDA' as metric_name,
                    '' as sensor_identifier,
                    '' as sensor_type,
                    wlda.station_id
                FROM
                    estimations_water_level_daily_average wlda
                JOIN (
                    SELECT
                        dm.*,
                        LEAD(valid_from) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_valid_from,
                        LEAD(name) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_model_name,
                        LEAD(station_id) OVER (PARTITION BY station_id ORDER BY valid_from) AS next_site_id
                    FROM
                        estimations_dischargemodel dm
                ) dm ON wlda.timestamp >= dm.valid_from AND (wlda.timestamp < dm.next_valid_from OR dm.next_valid_from IS NULL) AND wlda.station_id = dm.station_id
                WHERE
                    wlda.metric_name = 'WLDA';
              """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_daily_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_fiveday_average as
                WITH five_day_averages AS (
                    SELECT
                        wdda.timestamp AS timestamp,
                        CAST(NULL AS NUMERIC) as min_value,
        				AVG(wdda.avg_value) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS avg_value,
                        CAST(NULL AS NUMERIC) as max_value,
                        'm^3/s' as unit,
                        'E' as value_type,
                        'WDFA' as metric_name,
                        '' as sensor_identifier,
                        '' as sensor_type,
                        wdda.station_id
                    FROM
                        public.estimations_water_discharge_daily_average wdda
                )
                SELECT *
                FROM five_day_averages
                WHERE EXTRACT(DAY FROM timestamp) IN (3, 8, 13, 18, 23, 28);
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_fiveday_average CASCADE;")],
        ),

        migrations.RunSQL(
            sql=[(
                """
                create or replace view estimations_water_discharge_decade_average as
                WITH decade_averages AS (
                    SELECT
                        wdda.timestamp AS timestamp,
                        CAST(NULL AS NUMERIC) as min_value,
						AVG(wdda.avg_value) OVER (PARTITION BY wdda.station_id, EXTRACT(YEAR FROM wdda.timestamp), EXTRACT(MONTH FROM wdda.timestamp) ORDER BY wdda.timestamp ROWS BETWEEN 4 PRECEDING AND 5 FOLLOWING) as avg_value,
                        CAST(NULL AS NUMERIC) as max_value,
                        'm^3/s' as unit,
                        'E' as value_type,
                        'WDDA' as metric_name,
                        '' as sensor_identifier,
                        '' as sensor_type,
                        wdda.station_id
                    FROM
                        public.estimations_water_discharge_daily_average wdda
                )
                SELECT *
                FROM decade_averages
                WHERE EXTRACT(DAY FROM timestamp) IN (5, 15, 25);
                """
            )],
            reverse_sql=[("DROP VIEW IF EXISTS estimations_water_discharge_decade_average CASCADE;")],
        ),
        # migrations.RunSQL(sql=
        #                   """
        #                   create or replace view metrics_hydrologicalmetric_all as
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.estimations_water_level_daily_average
        #                     union
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.estimations_water_discharge_daily
        #                     union
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.estimations_water_discharge_daily_average
        #                     union
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.estimations_water_discharge_fiveday_average
        #                     union
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.estimations_water_discharge_decade_average
        #                     union
        #                     select timestamp, min_value, avg_value, max_value, unit, value_type, metric_name, sensor_identifier, sensor_type, station_id
        #                     from public.metrics_hydrologicalmetric;
        #                     """, reverse_sql="DROP VIEW IF EXISTS metrics_hydrologicalmetric_all;")

    ]
